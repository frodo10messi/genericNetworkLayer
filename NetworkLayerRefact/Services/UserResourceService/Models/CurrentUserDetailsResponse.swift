//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

struct CurrentUserDetailsResponse: Codable {
    
    /** The registration status of the organization user belongs to */
    public enum OrganizationStatus: String, Codable, Equatable, CaseIterable {
        case trialPeriod = "TRIAL_PERIOD"
        case notSubscribed = "NOT_SUBSCRIBED"
        case subscribed = "SUBSCRIBED"
        case subscriptionCancelled = "SUBSCRIPTION_CANCELLED"
        case potentiallyReturnable = "POTENTIALLY_RETURNABLE"
        case deleted = "DELETED"
    }
    
    /** The user's roles in their organization */
    public enum Roles: String, Codable, Equatable, CaseIterable {
        case orgAdmin = "ORG_ADMIN"
        case orgOwner = "ORG_OWNER"
        case orgTeacher = "ORG_TEACHER"
        case registeredUser = "REGISTERED_USER"
        case systemAdmin = "SYSTEM_ADMIN"
    }
    
    /** Indicates where the user is in the become teacher process */
    public enum TeacherWorkflowStatus: String, Codable, Equatable, CaseIterable {
        case noIntent = "NO_INTENT"
        case initiated = "INITIATED"
        case requested = "REQUESTED"
        case correctionRequired = "CORRECTION_REQUIRED"
        case approved = "APPROVED"
    }
    
    /** Indicates where the user is in the registration process */
    public enum UserRegistrationStatus: String, Codable, Equatable, CaseIterable {
        case basicInfoMissing = "BASIC_INFO_MISSING"
        case billingInfoMissing = "BILLING_INFO_MISSING"
        case subscriptionMissing = "SUBSCRIPTION_MISSING"
        case registrationFinished = "REGISTRATION_FINISHED"
    }
    
    enum CodingKeys: String, CodingKey {
        case accreditation
        case activeSubscription
        case affiliation
        case countryCode
        case dateOfBirth
        case displayName
        case email
        case firstName
        case id
        case introduction
        case languageCodes
        case lastName
        case mpSearchEnabled
        case organizationId
        case organizationStatus
        case phoneNumber
        case pictureUuid
        case pronouns
        case roles
        case teacherWorkflowStatus
        case timeZone
        case title
        case userRegistrationStatus
        case userUuid
    }
    
    /** The user's accreditation */
    public var accreditation: String?
    
    /** Whether the user's organization has an active TUUDR subscription */
    public var activeSubscription: Bool?
    
    /** The user's affiliation */
    public var affiliation: String?
    
    /** The user's home country code */
    public var countryCode: String?
    
    /** The user's date of birth */
    public var dateOfBirth: Date?
    
    /** The user's display name */
    public var displayName: String?
    
    /** The user's email address */
    public var email: String?
    
    /** The user's first name */
    public var firstName: String?
    
    /** The user's id */
    public var id: Int?
    
    /** The user's introduction */
    public var introduction: String?
    
    /** The user's selected language's code */
    public var languageCodes: [String]?
    
    /** The user's last name */
    public var lastName: String?
    
    /** The user is searchable in marketplace */
    public var mpSearchEnabled: Bool?
    
    /** he user's organization id */
    public var organizationId: Int?
    
    /** The registration status of the organization user belongs to */
    public var organizationStatus: OrganizationStatus?
    
    /** The user's phone number */
    public var phoneNumber: String?
    
    /** The user's profile picture uuid */
    public var pictureUuid: String?
    
    /** The user's pronouns */
    public var pronouns: String?
    
    /** The user's roles in their organization */
    public var roles: [Roles]?
    
    /** Indicates where the user is in the become teacher process */
    public var teacherWorkflowStatus: TeacherWorkflowStatus?
    
    /** The user's preferred timezone */
    public var timeZone: String?
    
    /** The user's title */
    public var title: String?
    
    /** Indicates where the user is in the registration process */
    public var userRegistrationStatus: UserRegistrationStatus?
    
    /** The user's uuid */
    public var userUuid: String?
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        if let dateOfBirth = dateOfBirth {
            let formatter = DateFormatter()
            formatter.dateFormat = "yyyy-MM-dd"
            let dateBirthString = formatter.string(from: dateOfBirth)
            try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        }
        
        try container.encodeIfPresent(accreditation, forKey: .accreditation)
        try container.encodeIfPresent(activeSubscription, forKey: .activeSubscription)
        try container.encodeIfPresent(affiliation, forKey: .affiliation)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(introduction, forKey: .introduction)
        try container.encodeIfPresent(languageCodes, forKey: .languageCodes)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(mpSearchEnabled, forKey: .mpSearchEnabled)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(organizationStatus, forKey: .organizationStatus)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(pictureUuid, forKey: .pictureUuid)
        try container.encodeIfPresent(pronouns, forKey: .pronouns)
        try container.encodeIfPresent(roles, forKey: .roles)
        try container.encodeIfPresent(teacherWorkflowStatus, forKey: .teacherWorkflowStatus)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(userRegistrationStatus, forKey: .userRegistrationStatus)
        try container.encodeIfPresent(userUuid, forKey: .userUuid)
    }
}
